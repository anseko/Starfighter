//----MovementAdapter.cs----
public abstract class MovementAdapter
{
    public virtual EnginesState GetMovement();
}

public struct EnginesState
{
    bool TopLeft;
    bool TopRight;
    bool BotLeft;
    bool BotRight;
    bool Thurst;
}


//----ShipMovement.cs----

class PlayerControl: MovementAdapter
{
    public override EnginesState GetMovement()
    {
        Чтение клавы
    }
}

class AIControl: MovementAdapter
{
    public override EnginesState GetMovement()
    {
        ИИ
    }
}


//----playerScript.cs----

public class playerScript : MonoBehaviour
{
    ... разные поля ...
    MovementAdapter ShipsBrain;

    void Start()
    {
        ShipsBrain = new PlayerControl();
        или
        ShipsBrain = new AIControl();
    }

    void Update()
    {
        var engines = ShipsBrain.GetMovement();
        if(engines.TopLeft)
        {
            TurnOnTopLeft();
        }
        ...остальные 4 проверки...
    } 
}


--------------------------------

abstract class A
{
    virtual void Func(){
        Console.WriteLine("Функция класса А");
    }
}

abstract class C
{
    void Func(){
        Console.WriteLine("Функция класса C");
    }
}

class B:A
{
    override void Func(){
        Console.WriteLine("Функция класса B");
    }
}

class D:C
{
    override void Func(){
        Console.WriteLine("Функция класса D");
    }
}


void Main(){
    A object1 = new A();
    A object2 = new B();
    C object3 = new C();
    C object4 = new D();

    object1.Func();
    object2.Func();
    object3.Func();
    object4.Func();
}

///
//  состояние вывода:
//  Функция класса А
//  Функция класса B
//  Функция класса С
//  Функция класса С
///